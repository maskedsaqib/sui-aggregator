import { Transaction, TransactionArgument, TransactionObjectArgument } from "@mysten/sui/transactions";
import { AggregatorClient, Dex, Env, Path } from "..";
export type CetusFlashSwapResult = {
    targetCoin: TransactionObjectArgument;
    flashReceipt: TransactionObjectArgument;
    payAmount: TransactionArgument;
};
export declare class Cetus implements Dex {
    private globalConfig;
    private partner;
    constructor(env: Env, partner?: string);
    flash_swap(client: AggregatorClient, txb: Transaction, path: Path, by_amount_in: boolean, packages?: Map<string, string>): CetusFlashSwapResult;
    repay_flash_swap(client: AggregatorClient, txb: Transaction, path: Path, inputCoin: TransactionObjectArgument, receipt: TransactionArgument, packages?: Map<string, string>): TransactionObjectArgument;
    swap(client: AggregatorClient, txb: Transaction, path: Path, inputCoin: TransactionObjectArgument, packages?: Map<string, string>): Promise<TransactionObjectArgument>;
}
